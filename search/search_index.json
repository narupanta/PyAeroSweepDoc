{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PyAeroSweep About PyAeroSweep is a multi-functional tool that performs aerodynamic sweeps of airfoils and wings using high-fidelity CFD methods. PyAeroSweep can perform a range of pre-processing and simulation tasks: Generation of airfoil and wing geometries of various kinds: Airfoils Airfoils can be generated using PARSEC of CST parametrization methods A droop nose, plain, or slotted flaps can be defined for given airfoils Airfoil coordinates are imported in typical text formats Wings Generation of piesewise wing planforms using the Pygeo framework Wing planforms are exported in the .igs format Only clean planform capabilities are available Automatic geometry meshing using Pointwise: Meshing is performed using pre-defined templates that can be parameterically tuned for a particular problem Viscous layers are added for unstructured meshes using TREX Airfoils Structured and unstructured mesh options available Meshing of externally imported airfils is possible Wings Meshes the wing surface using the Pointwise automatic mesh generation method CFD solution using SU2: At the moment, can only run RANS solutions. Euler solutions are planned 3D solutions for wings are currently available only with a symmetry plane angle-of-attack, altitude, and Mach number sweeps are possible The tool can run a similar mesh created externally","title":"Home"},{"location":"#welcome-to-pyaerosweep","text":"","title":"Welcome to PyAeroSweep"},{"location":"#about","text":"PyAeroSweep is a multi-functional tool that performs aerodynamic sweeps of airfoils and wings using high-fidelity CFD methods. PyAeroSweep can perform a range of pre-processing and simulation tasks: Generation of airfoil and wing geometries of various kinds: Airfoils Airfoils can be generated using PARSEC of CST parametrization methods A droop nose, plain, or slotted flaps can be defined for given airfoils Airfoil coordinates are imported in typical text formats Wings Generation of piesewise wing planforms using the Pygeo framework Wing planforms are exported in the .igs format Only clean planform capabilities are available Automatic geometry meshing using Pointwise: Meshing is performed using pre-defined templates that can be parameterically tuned for a particular problem Viscous layers are added for unstructured meshes using TREX Airfoils Structured and unstructured mesh options available Meshing of externally imported airfils is possible Wings Meshes the wing surface using the Pointwise automatic mesh generation method CFD solution using SU2: At the moment, can only run RANS solutions. Euler solutions are planned 3D solutions for wings are currently available only with a symmetry plane angle-of-attack, altitude, and Mach number sweeps are possible The tool can run a similar mesh created externally","title":"About"},{"location":"installation/","text":"Prerequisites The following set of tools must be installed to enable all capabilities: Pointwise V18.6+ https://www.pointwise.com/ SU2 v7.0+ https://su2code.github.io/ pygeo https://mdolab-pygeo.readthedocs-hosted.com/en/latest/?badge=latest preFoil https://mdolab-prefoil.readthedocs-hosted.com/en/latest/ OpenMPI https://www.open-mpi.org/ Installation Clone the repository or download repository to the folder of your choice","title":"Installation"},{"location":"installation/#prerequisites","text":"The following set of tools must be installed to enable all capabilities: Pointwise V18.6+ https://www.pointwise.com/ SU2 v7.0+ https://su2code.github.io/ pygeo https://mdolab-pygeo.readthedocs-hosted.com/en/latest/?badge=latest preFoil https://mdolab-prefoil.readthedocs-hosted.com/en/latest/ OpenMPI https://www.open-mpi.org/","title":"Prerequisites"},{"location":"installation/#installation","text":"Clone the repository or download repository to the folder of your choice","title":"Installation"},{"location":"other/","text":"Others Turbulence Model The information of turbulence models used in this project can be found under these 2 links SST Model SA Model Wall functions Available for RANS, INC_RANS. The wall function model of Nichols and Nelson (2004) has been implemented in the compressible and the incompressible solver, for the SA as well as the SST models. For the compressible solver, the wall function model takes into account the frictional heating of the wall according to the Crocco-Busemann relation when the wall boundary conditions is not isothermal. When the wall model is active, the value of the dimensional distance of the first node from the wall can be y^+ > 5 . When the wall model is not active, y^+ < 5 and in addition a fine mesh is necessary close to the wall to resolve the near wall boundary layer.","title":"Others"},{"location":"other/#others","text":"","title":"Others"},{"location":"other/#turbulence-model","text":"The information of turbulence models used in this project can be found under these 2 links SST Model SA Model","title":"Turbulence Model"},{"location":"other/#wall-functions","text":"Available for RANS, INC_RANS. The wall function model of Nichols and Nelson (2004) has been implemented in the compressible and the incompressible solver, for the SA as well as the SST models. For the compressible solver, the wall function model takes into account the frictional heating of the wall according to the Crocco-Busemann relation when the wall boundary conditions is not isothermal. When the wall model is active, the value of the dimensional distance of the first node from the wall can be y^+ > 5 . When the wall model is not active, y^+ < 5 and in addition a fine mesh is necessary close to the wall to resolve the near wall boundary layer.","title":"Wall functions"},{"location":"structure/","text":"Code Structure Core Methods Components Input_Data.py In this file, we can setup the simulation by inputting various kinds of variables such as: working_dir which will be changed according to the user's workspace Solver Settings working_dir = r\"/home/doktorand/Software/PyAeroSweep-Stan-V3/PyAeroSweep/\" Solver_settings = Solver() Solver_settings.working_dir = working_dir Solver_settings.name = 'SU2' # SU2 or Fluent # Solver dimensions # 2d or 3d for SU2 Solver_settings.dimensions = '2d' # Only available for SU2 in 3D # defines half od the shape or a full shape analysis (Only symmetric works for now) Solver_settings.symmetric = True # SST or SA for SU2 Solver_settings.turbulence_model = 'SST' # Number of processors Solver_settings.processors = 1 # Cauchy convergence criteria # Could be either LIFT or DRAG Solver_settings.monitor = \"LIFT\" Solver_settings.tolerance = 5e-7 Solver_settings.max_iterations = 100 Solver_settings.save_frequency = 100 # Warm start # YES or NO Solver_settings.warmstart = 'YES' # SU2 reference config file name which will be updated Solver_settings.config_file = 'Run_airfoil_template.cfg' Freestream Settings The following code block is the setup of Freestream. The air speed (in Mach), altitude (meters) and angle of attack (degrees) can be set as following. Freestream = Data() Freestream.Mach = np.array([0.21,0.25]) Freestream.Altitude = np.array([0,2000]) # in meters Freestream.Angle_of_attack = np.array([0.0,3.0,5.0]) # in degrees Geometry Settings Geometry_data = Geometry() # Geometry to analyze ''' Could be airfoil or wing Airfoils can be parametrically defined using the PARSEC methods Wings are defined only using the existing CAD file and work either for straight tapered wings with or without the kink''' Geometry_data.type = 'airfoil' # Reference values Geometry_data.reference_values = { \"Area\" : 2.62, \"Length\" : 2.62, \"Depth\" : 1, \"Point\" : [0.25*2.62,0,0] # reference point about which the moment is taken } # Flag to use PARSEC parametrization or to use already existing airfoils Geometry_data.PARSEC = True # Airfoil files are used either to write PARSEC-generated airfoil and then read by Pointwise or to read directly from them Geometry_data.airfoil_files = { \"upper\" : \"main_airfoil_upper.dat\", \"lower\" : \"main_airfoil_lower.dat\" } segment = Segment() segment.tag = 'section_1' segment.spanwise_location = 0 segment.chord = 7.760 segment.incidence = 2 segment.dihedral = 3 segment.leading_edge_sweep = 30 segment.Airfoil.files = { \"upper\" : \"main_airfoil_upper_1.dat\", \"lower\" : \"main_airfoil_lower_1.dat\" } segment.Airfoil.PARSEC = { \"rle\" : 0.0084, # Main airfoil LE radius \"x_pre\" : 0.458080577545180, # x-location of the crest on the pressure side \"y_pre\" : -0.04553160030118, # y-location of the crest on the pressure side \"d2ydx2_pre\" : 0.554845554794938, # curvature of the crest on the pressure side \"th_pre\" : -9.649803736, # trailing edge angle on the pressure side [deg] \"x_suc\" : 0.46036604, # x-location of the crest on the suction side \"y_suc\" : 0.06302395539, # y-location of the crest on the suction side \"d2ydx2_suc\" : -0.361421420, # curvature of the crest on the suction side \"th_suc\" : -12.391677695858 # trailing edge angle on the suction side [deg] } Geometry_data.Segments.append(segment) Mesh Settings Mesh_data = Mesh() # Flag to mesh the shape or not Mesh_data.meshing = True # Mesh type Mesh_data.structured = True # Defined the OS in which Pointwise is used # WINDOWS or Linux Mesh_data.operating_system = 'Linux' # Pointwise tclsh directory used in Windows Mesh_data.tclsh_directory = r\"/home/doktorand/Fidelity/Pointwise/Pointwise2022.1\" # Desired Y+ value Mesh_data.Yplus = 1.0 # Define the Glyph template to use for meshing Mesh_data.glyph_file = \"mesh_clean_airfoil_SU2.glf\" # Mesh filename for either the newly generated mesh or an eisting mesh Mesh_data.filename = 'su2meshEx.su2' # Define far-field Mesh_data.far_field = 100 * Geometry_data.reference_values[\"Length\"] Mesh_data.airfoil_mesh_settings = { \"LE_spacing\" : 0.001, # Airfoil leading edge spacing \"TE_spacing\" : 0.0005, # Airfoil trailing edge spacing \"flap_cluster\" : 0.005, \"connector dimensions\" : [200, 200, 8], # \"connector_dimensions\": [200, 120, 150, 150, 70, 25, 8, 8], \"number of normal cells\" : 230 } Packing all the inputs Input = Data() Input.Solver = Solver_settings Input.Freestream = Freestream Input.Geometry = Geometry_data Input.Mesh = Mesh_data Summary Code Example At the end, the function Input_data() is defined as import os import subprocess import numpy as np from Core.Data import Data from Components.Solver import Solver from Components.Geometry import Geometry from Components.Geometry.Wing.Segment import Segment from Components.Mesh import Mesh from Run_aerodynamic_analysis import run_aerodynamic_analysis def Input_data(): working_dir = r\"/home/doktorand/Software/PyAeroSweep-Stan-V3/PyAeroSweep/\" # ------------------------------- SOLVER SETTINGS ----------------------------------------------------------- # # Solver_settings = Solver() Solver_settings.working_dir = working_dir Solver_settings.name = 'SU2' # SU2 or Fluent # Solver dimensions # 2d or 3d for SU2 Solver_settings.dimensions = '2d' # Only available for SU2 in 3D # defines half od the shape or a full shape analysis (Only symmetric works for now) Solver_settings.symmetric = True # SST or SA for SU2 Solver_settings.turbulence_model = 'SST' # Number of processors Solver_settings.processors = 1 # Cauchy convergence criteria # Could be either LIFT or DRAG Solver_settings.monitor = \"LIFT\" Solver_settings.tolerance = 5e-7 Solver_settings.max_iterations = 100 Solver_settings.save_frequency = 100 # Warm start # YES or NO Solver_settings.warmstart = 'YES' # SU2 reference config file name which will be updated Solver_settings.config_file = 'Run_airfoil_template.cfg' # ------------------------------- FREESTREAM SETTINGS ------------------------------------------------------- # # Freestream = Data() Freestream.Mach = np.array([0.21,0.25]) Freestream.Altitude = np.array([0,2000]) # in meters Freestream.Angle_of_attack = np.array([0.0,3.0,5.0]) # in degrees # ------------------------------- GEOMETRY SETTINGS --------------------------------------------------------- # # Geometry_data = Geometry() # Geometry to analyze ''' Could be airfoil or wing Airfoils can be parametrically defined using the PARSEC methods Wings are defined only using the existing CAD file and work either for straight tapered wings with or without the kink''' Geometry_data.type = 'airfoil' # Reference values Geometry_data.reference_values = { \"Area\" : 2.62, \"Length\" : 2.62, \"Depth\" : 1, \"Point\" : [0.25*2.62,0,0] # reference point about which the moment is taken } # Flag to use PARSEC parametrization or to use already existing airfoils Geometry_data.PARSEC = True # Airfoil files are used either to write PARSEC-generated airfoil and then read by Pointwise or to read directly from them Geometry_data.airfoil_files = { \"upper\" : \"main_airfoil_upper.dat\", \"lower\" : \"main_airfoil_lower.dat\" } segment = Segment() segment.tag = 'section_1' segment.spanwise_location = 0 segment.chord = 7.760 segment.incidence = 2 segment.dihedral = 3 segment.leading_edge_sweep = 30 segment.Airfoil.files = { \"upper\" : \"main_airfoil_upper_1.dat\", \"lower\" : \"main_airfoil_lower_1.dat\" } segment.Airfoil.PARSEC = { \"rle\" : 0.0084, # Main airfoil LE radius \"x_pre\" : 0.458080577545180, # x-location of the crest on the pressure side \"y_pre\" : -0.04553160030118, # y-location of the crest on the pressure side \"d2ydx2_pre\" : 0.554845554794938, # curvature of the crest on the pressure side \"th_pre\" : -9.649803736, # trailing edge angle on the pressure side [deg] \"x_suc\" : 0.46036604, # x-location of the crest on the suction side \"y_suc\" : 0.06302395539, # y-location of the crest on the suction side \"d2ydx2_suc\" : -0.361421420, # curvature of the crest on the suction side \"th_suc\" : -12.391677695858 # trailing edge angle on the suction side [deg] } Geometry_data.Segments.append(segment) # ------------------------------- MESH SETTINGS ---------------------------------------------------------------- # # Mesh_data = Mesh() # Flag to mesh the shape or not Mesh_data.meshing = True # Mesh type Mesh_data.structured = True # Defined the OS in which Pointwise is used # WINDOWS or Linux Mesh_data.operating_system = 'Linux' # Pointwise tclsh directory used in Windows Mesh_data.tclsh_directory = r\"/home/doktorand/Fidelity/Pointwise/Pointwise2022.1\" # Desired Y+ value Mesh_data.Yplus = 1.0 # Define the Glyph template to use for meshing Mesh_data.glyph_file = \"mesh_clean_airfoil_SU2.glf\" # Mesh filename for either the newly generated mesh or an eisting mesh Mesh_data.filename = 'su2meshEx.su2' # Define far-field Mesh_data.far_field = 100 * Geometry_data.reference_values[\"Length\"] Mesh_data.airfoil_mesh_settings = { \"LE_spacing\" : 0.001, # Airfoil leading edge spacing \"TE_spacing\" : 0.0005, # Airfoil trailing edge spacing \"flap_cluster\" : 0.005, \"connector dimensions\" : [200, 200, 8], # \"connector_dimensions\": [200, 120, 150, 150, 70, 25, 8, 8], \"number of normal cells\" : 230 } # ----------------------------------------------------------------------------------------------------------------------------- # # # Pack all inputs Input = Data() Input.Solver = Solver_settings Input.Freestream = Freestream Input.Geometry = Geometry_data Input.Mesh = Mesh_data return Input After finishing running the function Input_data() , function aerodynamic_analysis(Input) will be executed using Input_data() as its input to perform the simulation.","title":"Code Structure"},{"location":"structure/#code-structure","text":"","title":"Code Structure"},{"location":"structure/#core","text":"","title":"Core"},{"location":"structure/#methods","text":"","title":"Methods"},{"location":"structure/#components","text":"","title":"Components"},{"location":"structure/#input_datapy","text":"In this file, we can setup the simulation by inputting various kinds of variables such as: working_dir which will be changed according to the user's workspace","title":"Input_Data.py"},{"location":"structure/#solver-settings","text":"working_dir = r\"/home/doktorand/Software/PyAeroSweep-Stan-V3/PyAeroSweep/\" Solver_settings = Solver() Solver_settings.working_dir = working_dir Solver_settings.name = 'SU2' # SU2 or Fluent # Solver dimensions # 2d or 3d for SU2 Solver_settings.dimensions = '2d' # Only available for SU2 in 3D # defines half od the shape or a full shape analysis (Only symmetric works for now) Solver_settings.symmetric = True # SST or SA for SU2 Solver_settings.turbulence_model = 'SST' # Number of processors Solver_settings.processors = 1 # Cauchy convergence criteria # Could be either LIFT or DRAG Solver_settings.monitor = \"LIFT\" Solver_settings.tolerance = 5e-7 Solver_settings.max_iterations = 100 Solver_settings.save_frequency = 100 # Warm start # YES or NO Solver_settings.warmstart = 'YES' # SU2 reference config file name which will be updated Solver_settings.config_file = 'Run_airfoil_template.cfg'","title":"Solver Settings"},{"location":"structure/#freestream-settings","text":"The following code block is the setup of Freestream. The air speed (in Mach), altitude (meters) and angle of attack (degrees) can be set as following. Freestream = Data() Freestream.Mach = np.array([0.21,0.25]) Freestream.Altitude = np.array([0,2000]) # in meters Freestream.Angle_of_attack = np.array([0.0,3.0,5.0]) # in degrees","title":"Freestream Settings"},{"location":"structure/#geometry-settings","text":"Geometry_data = Geometry() # Geometry to analyze ''' Could be airfoil or wing Airfoils can be parametrically defined using the PARSEC methods Wings are defined only using the existing CAD file and work either for straight tapered wings with or without the kink''' Geometry_data.type = 'airfoil' # Reference values Geometry_data.reference_values = { \"Area\" : 2.62, \"Length\" : 2.62, \"Depth\" : 1, \"Point\" : [0.25*2.62,0,0] # reference point about which the moment is taken } # Flag to use PARSEC parametrization or to use already existing airfoils Geometry_data.PARSEC = True # Airfoil files are used either to write PARSEC-generated airfoil and then read by Pointwise or to read directly from them Geometry_data.airfoil_files = { \"upper\" : \"main_airfoil_upper.dat\", \"lower\" : \"main_airfoil_lower.dat\" } segment = Segment() segment.tag = 'section_1' segment.spanwise_location = 0 segment.chord = 7.760 segment.incidence = 2 segment.dihedral = 3 segment.leading_edge_sweep = 30 segment.Airfoil.files = { \"upper\" : \"main_airfoil_upper_1.dat\", \"lower\" : \"main_airfoil_lower_1.dat\" } segment.Airfoil.PARSEC = { \"rle\" : 0.0084, # Main airfoil LE radius \"x_pre\" : 0.458080577545180, # x-location of the crest on the pressure side \"y_pre\" : -0.04553160030118, # y-location of the crest on the pressure side \"d2ydx2_pre\" : 0.554845554794938, # curvature of the crest on the pressure side \"th_pre\" : -9.649803736, # trailing edge angle on the pressure side [deg] \"x_suc\" : 0.46036604, # x-location of the crest on the suction side \"y_suc\" : 0.06302395539, # y-location of the crest on the suction side \"d2ydx2_suc\" : -0.361421420, # curvature of the crest on the suction side \"th_suc\" : -12.391677695858 # trailing edge angle on the suction side [deg] } Geometry_data.Segments.append(segment)","title":"Geometry Settings"},{"location":"structure/#mesh-settings","text":"Mesh_data = Mesh() # Flag to mesh the shape or not Mesh_data.meshing = True # Mesh type Mesh_data.structured = True # Defined the OS in which Pointwise is used # WINDOWS or Linux Mesh_data.operating_system = 'Linux' # Pointwise tclsh directory used in Windows Mesh_data.tclsh_directory = r\"/home/doktorand/Fidelity/Pointwise/Pointwise2022.1\" # Desired Y+ value Mesh_data.Yplus = 1.0 # Define the Glyph template to use for meshing Mesh_data.glyph_file = \"mesh_clean_airfoil_SU2.glf\" # Mesh filename for either the newly generated mesh or an eisting mesh Mesh_data.filename = 'su2meshEx.su2' # Define far-field Mesh_data.far_field = 100 * Geometry_data.reference_values[\"Length\"] Mesh_data.airfoil_mesh_settings = { \"LE_spacing\" : 0.001, # Airfoil leading edge spacing \"TE_spacing\" : 0.0005, # Airfoil trailing edge spacing \"flap_cluster\" : 0.005, \"connector dimensions\" : [200, 200, 8], # \"connector_dimensions\": [200, 120, 150, 150, 70, 25, 8, 8], \"number of normal cells\" : 230 }","title":"Mesh Settings"},{"location":"structure/#packing-all-the-inputs","text":"Input = Data() Input.Solver = Solver_settings Input.Freestream = Freestream Input.Geometry = Geometry_data Input.Mesh = Mesh_data","title":"Packing all the inputs"},{"location":"structure/#summary-code-example","text":"At the end, the function Input_data() is defined as import os import subprocess import numpy as np from Core.Data import Data from Components.Solver import Solver from Components.Geometry import Geometry from Components.Geometry.Wing.Segment import Segment from Components.Mesh import Mesh from Run_aerodynamic_analysis import run_aerodynamic_analysis def Input_data(): working_dir = r\"/home/doktorand/Software/PyAeroSweep-Stan-V3/PyAeroSweep/\" # ------------------------------- SOLVER SETTINGS ----------------------------------------------------------- # # Solver_settings = Solver() Solver_settings.working_dir = working_dir Solver_settings.name = 'SU2' # SU2 or Fluent # Solver dimensions # 2d or 3d for SU2 Solver_settings.dimensions = '2d' # Only available for SU2 in 3D # defines half od the shape or a full shape analysis (Only symmetric works for now) Solver_settings.symmetric = True # SST or SA for SU2 Solver_settings.turbulence_model = 'SST' # Number of processors Solver_settings.processors = 1 # Cauchy convergence criteria # Could be either LIFT or DRAG Solver_settings.monitor = \"LIFT\" Solver_settings.tolerance = 5e-7 Solver_settings.max_iterations = 100 Solver_settings.save_frequency = 100 # Warm start # YES or NO Solver_settings.warmstart = 'YES' # SU2 reference config file name which will be updated Solver_settings.config_file = 'Run_airfoil_template.cfg' # ------------------------------- FREESTREAM SETTINGS ------------------------------------------------------- # # Freestream = Data() Freestream.Mach = np.array([0.21,0.25]) Freestream.Altitude = np.array([0,2000]) # in meters Freestream.Angle_of_attack = np.array([0.0,3.0,5.0]) # in degrees # ------------------------------- GEOMETRY SETTINGS --------------------------------------------------------- # # Geometry_data = Geometry() # Geometry to analyze ''' Could be airfoil or wing Airfoils can be parametrically defined using the PARSEC methods Wings are defined only using the existing CAD file and work either for straight tapered wings with or without the kink''' Geometry_data.type = 'airfoil' # Reference values Geometry_data.reference_values = { \"Area\" : 2.62, \"Length\" : 2.62, \"Depth\" : 1, \"Point\" : [0.25*2.62,0,0] # reference point about which the moment is taken } # Flag to use PARSEC parametrization or to use already existing airfoils Geometry_data.PARSEC = True # Airfoil files are used either to write PARSEC-generated airfoil and then read by Pointwise or to read directly from them Geometry_data.airfoil_files = { \"upper\" : \"main_airfoil_upper.dat\", \"lower\" : \"main_airfoil_lower.dat\" } segment = Segment() segment.tag = 'section_1' segment.spanwise_location = 0 segment.chord = 7.760 segment.incidence = 2 segment.dihedral = 3 segment.leading_edge_sweep = 30 segment.Airfoil.files = { \"upper\" : \"main_airfoil_upper_1.dat\", \"lower\" : \"main_airfoil_lower_1.dat\" } segment.Airfoil.PARSEC = { \"rle\" : 0.0084, # Main airfoil LE radius \"x_pre\" : 0.458080577545180, # x-location of the crest on the pressure side \"y_pre\" : -0.04553160030118, # y-location of the crest on the pressure side \"d2ydx2_pre\" : 0.554845554794938, # curvature of the crest on the pressure side \"th_pre\" : -9.649803736, # trailing edge angle on the pressure side [deg] \"x_suc\" : 0.46036604, # x-location of the crest on the suction side \"y_suc\" : 0.06302395539, # y-location of the crest on the suction side \"d2ydx2_suc\" : -0.361421420, # curvature of the crest on the suction side \"th_suc\" : -12.391677695858 # trailing edge angle on the suction side [deg] } Geometry_data.Segments.append(segment) # ------------------------------- MESH SETTINGS ---------------------------------------------------------------- # # Mesh_data = Mesh() # Flag to mesh the shape or not Mesh_data.meshing = True # Mesh type Mesh_data.structured = True # Defined the OS in which Pointwise is used # WINDOWS or Linux Mesh_data.operating_system = 'Linux' # Pointwise tclsh directory used in Windows Mesh_data.tclsh_directory = r\"/home/doktorand/Fidelity/Pointwise/Pointwise2022.1\" # Desired Y+ value Mesh_data.Yplus = 1.0 # Define the Glyph template to use for meshing Mesh_data.glyph_file = \"mesh_clean_airfoil_SU2.glf\" # Mesh filename for either the newly generated mesh or an eisting mesh Mesh_data.filename = 'su2meshEx.su2' # Define far-field Mesh_data.far_field = 100 * Geometry_data.reference_values[\"Length\"] Mesh_data.airfoil_mesh_settings = { \"LE_spacing\" : 0.001, # Airfoil leading edge spacing \"TE_spacing\" : 0.0005, # Airfoil trailing edge spacing \"flap_cluster\" : 0.005, \"connector dimensions\" : [200, 200, 8], # \"connector_dimensions\": [200, 120, 150, 150, 70, 25, 8, 8], \"number of normal cells\" : 230 } # ----------------------------------------------------------------------------------------------------------------------------- # # # Pack all inputs Input = Data() Input.Solver = Solver_settings Input.Freestream = Freestream Input.Geometry = Geometry_data Input.Mesh = Mesh_data return Input After finishing running the function Input_data() , function aerodynamic_analysis(Input) will be executed using Input_data() as its input to perform the simulation.","title":"Summary Code Example"},{"location":"usage/","text":"Usage Quickstart To test the code and ensure that all cababilities are available, run cases located in the Test_Cases directory. To run the case: Use any IDE environment (for example, Visual Studio Code) Allocate the working directory to the main one, where all software folders and the file Run_aerodynamic_analysis.py are allocated. Open the file Input_data.py in the test case file of your interest and update all common directory variables (working directory, Pointwise execution file directory, etc). Run the file","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#quickstart","text":"To test the code and ensure that all cababilities are available, run cases located in the Test_Cases directory. To run the case: Use any IDE environment (for example, Visual Studio Code) Allocate the working directory to the main one, where all software folders and the file Run_aerodynamic_analysis.py are allocated. Open the file Input_data.py in the test case file of your interest and update all common directory variables (working directory, Pointwise execution file directory, etc). Run the file","title":"Quickstart"},{"location":"structure/Components/","text":"Components","title":"Components"},{"location":"structure/Components/#components","text":"","title":"Components"},{"location":"structure/Core/","text":"Core","title":"Core"},{"location":"structure/Core/#core","text":"","title":"Core"},{"location":"structure/Input_Data/","text":"Input_Data.py In this file, we can setup the simulation by inputting various kinds of variables such as: working_dir which will be changed according to the user's workspace Solver Settings working_dir = r\"/home/doktorand/Software/PyAeroSweep-Stan-V3/PyAeroSweep/\" Solver_settings = Solver() Solver_settings.working_dir = working_dir Solver_settings.name = 'SU2' # SU2 or Fluent # Solver dimensions # 2d or 3d for SU2 Solver_settings.dimensions = '2d' # Only available for SU2 in 3D # defines half od the shape or a full shape analysis (Only symmetric works for now) Solver_settings.symmetric = True # SST or SA for SU2 Solver_settings.turbulence_model = 'SST' # Number of processors Solver_settings.processors = 1 # Cauchy convergence criteria # Could be either LIFT or DRAG Solver_settings.monitor = \"LIFT\" Solver_settings.tolerance = 5e-7 Solver_settings.max_iterations = 100 Solver_settings.save_frequency = 100 # Warm start # YES or NO Solver_settings.warmstart = 'YES' # SU2 reference config file name which will be updated Solver_settings.config_file = 'Run_airfoil_template.cfg' Freestream Settings The following code block is the setup of Freestream. The air speed (in Mach), altitude (meters) and angle of attack (degrees) can be set as following. In file run_SU2.py, there will be a loop for every possible cases regarding the Freestream Settings Freestream = Data() Freestream.Mach = np.array([0.21,0.25]) Freestream.Altitude = np.array([0,2000]) # in meters Freestream.Angle_of_attack = np.array([0.0,3.0,5.0]) # in degrees Geometry Settings In this section, we can define the geometry of the airfoil. For 2D case, PARSEC and CST can be used to define the airfoil geometry's and we can also add the definition of trailing edge and leading edge device into the geometry. For 3D case, pygeo will be used to generate the airfoil geometry. Futher information about defining airfoil geometry can be found in these links: CST PARSEC Code Example Geometry_data = Geometry() # Geometry to analyze ''' Could be airfoil or wing Airfoils can be parametrically defined using the PARSEC methods Wings are defined only using the existing CAD file and work either for straight tapered wings with or without the kink''' Geometry_data.type = 'airfoil' # Reference values Geometry_data.reference_values = { \"Area\" : 2.62, \"Length\" : 2.62, \"Depth\" : 1, \"Point\" : [0.25*2.62,0,0] # reference point about which the moment is taken } # Flag to use PARSEC parametrization or to use already existing airfoils Geometry_data.PARSEC = True # Airfoil files are used either to write PARSEC-generated airfoil and then read by Pointwise or to read directly from them Geometry_data.airfoil_files = { \"upper\" : \"main_airfoil_upper.dat\", \"lower\" : \"main_airfoil_lower.dat\" } segment = Segment() segment.tag = 'section_1' segment.spanwise_location = 0 segment.chord = 7.760 segment.incidence = 2 segment.dihedral = 3 segment.leading_edge_sweep = 30 segment.Airfoil.files = { \"upper\" : \"main_airfoil_upper_1.dat\", \"lower\" : \"main_airfoil_lower_1.dat\" } segment.Airfoil.PARSEC = { \"rle\" : 0.0084, # Main airfoil LE radius \"x_pre\" : 0.458080577545180, # x-location of the crest on the pressure side \"y_pre\" : -0.04553160030118, # y-location of the crest on the pressure side \"d2ydx2_pre\" : 0.554845554794938, # curvature of the crest on the pressure side \"th_pre\" : -9.649803736, # trailing edge angle on the pressure side [deg] \"x_suc\" : 0.46036604, # x-location of the crest on the suction side \"y_suc\" : 0.06302395539, # y-location of the crest on the suction side \"d2ydx2_suc\" : -0.361421420, # curvature of the crest on the suction side \"th_suc\" : -12.391677695858 # trailing edge angle on the suction side [deg] } Geometry_data.Segments.append(segment) Mesh Settings Mesh_data = Mesh() # Flag to mesh the shape or not Mesh_data.meshing = True # Mesh type Mesh_data.structured = True # Defined the OS in which Pointwise is used # WINDOWS or Linux Mesh_data.operating_system = 'Linux' # Pointwise tclsh directory used in Windows Mesh_data.tclsh_directory = r\"/home/doktorand/Fidelity/Pointwise/Pointwise2022.1\" # Desired Y+ value Mesh_data.Yplus = 1.0 # Define the Glyph template to use for meshing Mesh_data.glyph_file = \"mesh_clean_airfoil_SU2.glf\" # Mesh filename for either the newly generated mesh or an eisting mesh Mesh_data.filename = 'su2meshEx.su2' # Define far-field Mesh_data.far_field = 100 * Geometry_data.reference_values[\"Length\"] Mesh_data.airfoil_mesh_settings = { \"LE_spacing\" : 0.001, # Airfoil leading edge spacing \"TE_spacing\" : 0.0005, # Airfoil trailing edge spacing \"flap_cluster\" : 0.005, \"connector dimensions\" : [200, 200, 8], # \"connector_dimensions\": [200, 120, 150, 150, 70, 25, 8, 8], \"number of normal cells\" : 230 } Packing all the inputs Input = Data() Input.Solver = Solver_settings Input.Freestream = Freestream Input.Geometry = Geometry_data Input.Mesh = Mesh_data Summary Code Example At the end, the function Input_data() is defined as import os import subprocess import numpy as np from Core.Data import Data from Components.Solver import Solver from Components.Geometry import Geometry from Components.Geometry.Wing.Segment import Segment from Components.Mesh import Mesh from Run_aerodynamic_analysis import run_aerodynamic_analysis def Input_data(): working_dir = r\"/home/doktorand/Software/PyAeroSweep-Stan-V3/PyAeroSweep/\" # ------------------------------- SOLVER SETTINGS ----------------------------------------------------------- # # Solver_settings = Solver() Solver_settings.working_dir = working_dir Solver_settings.name = 'SU2' # SU2 or Fluent # Solver dimensions # 2d or 3d for SU2 Solver_settings.dimensions = '2d' # Only available for SU2 in 3D # defines half od the shape or a full shape analysis (Only symmetric works for now) Solver_settings.symmetric = True # SST or SA for SU2 Solver_settings.turbulence_model = 'SST' # Number of processors Solver_settings.processors = 1 # Cauchy convergence criteria # Could be either LIFT or DRAG Solver_settings.monitor = \"LIFT\" Solver_settings.tolerance = 5e-7 Solver_settings.max_iterations = 100 Solver_settings.save_frequency = 100 # Warm start # YES or NO Solver_settings.warmstart = 'YES' # SU2 reference config file name which will be updated Solver_settings.config_file = 'Run_airfoil_template.cfg' # ------------------------------- FREESTREAM SETTINGS ------------------------------------------------------- # # Freestream = Data() Freestream.Mach = np.array([0.21,0.25]) Freestream.Altitude = np.array([0,2000]) # in meters Freestream.Angle_of_attack = np.array([0.0,3.0,5.0]) # in degrees # ------------------------------- GEOMETRY SETTINGS --------------------------------------------------------- # # Geometry_data = Geometry() # Geometry to analyze ''' Could be airfoil or wing Airfoils can be parametrically defined using the PARSEC methods Wings are defined only using the existing CAD file and work either for straight tapered wings with or without the kink''' Geometry_data.type = 'airfoil' # Reference values Geometry_data.reference_values = { \"Area\" : 2.62, \"Length\" : 2.62, \"Depth\" : 1, \"Point\" : [0.25*2.62,0,0] # reference point about which the moment is taken } # Flag to use PARSEC parametrization or to use already existing airfoils Geometry_data.PARSEC = True # Airfoil files are used either to write PARSEC-generated airfoil and then read by Pointwise or to read directly from them Geometry_data.airfoil_files = { \"upper\" : \"main_airfoil_upper.dat\", \"lower\" : \"main_airfoil_lower.dat\" } segment = Segment() segment.tag = 'section_1' segment.spanwise_location = 0 segment.chord = 7.760 segment.incidence = 2 segment.dihedral = 3 segment.leading_edge_sweep = 30 segment.Airfoil.files = { \"upper\" : \"main_airfoil_upper_1.dat\", \"lower\" : \"main_airfoil_lower_1.dat\" } segment.Airfoil.PARSEC = { \"rle\" : 0.0084, # Main airfoil LE radius \"x_pre\" : 0.458080577545180, # x-location of the crest on the pressure side \"y_pre\" : -0.04553160030118, # y-location of the crest on the pressure side \"d2ydx2_pre\" : 0.554845554794938, # curvature of the crest on the pressure side \"th_pre\" : -9.649803736, # trailing edge angle on the pressure side [deg] \"x_suc\" : 0.46036604, # x-location of the crest on the suction side \"y_suc\" : 0.06302395539, # y-location of the crest on the suction side \"d2ydx2_suc\" : -0.361421420, # curvature of the crest on the suction side \"th_suc\" : -12.391677695858 # trailing edge angle on the suction side [deg] } Geometry_data.Segments.append(segment) # ------------------------------- MESH SETTINGS ---------------------------------------------------------------- # # Mesh_data = Mesh() # Flag to mesh the shape or not Mesh_data.meshing = True # Mesh type Mesh_data.structured = True # Defined the OS in which Pointwise is used # WINDOWS or Linux Mesh_data.operating_system = 'Linux' # Pointwise tclsh directory used in Windows Mesh_data.tclsh_directory = r\"/home/doktorand/Fidelity/Pointwise/Pointwise2022.1\" # Desired Y+ value Mesh_data.Yplus = 1.0 # Define the Glyph template to use for meshing Mesh_data.glyph_file = \"mesh_clean_airfoil_SU2.glf\" # Mesh filename for either the newly generated mesh or an eisting mesh Mesh_data.filename = 'su2meshEx.su2' # Define far-field Mesh_data.far_field = 100 * Geometry_data.reference_values[\"Length\"] Mesh_data.airfoil_mesh_settings = { \"LE_spacing\" : 0.001, # Airfoil leading edge spacing \"TE_spacing\" : 0.0005, # Airfoil trailing edge spacing \"flap_cluster\" : 0.005, \"connector dimensions\" : [200, 200, 8], # \"connector_dimensions\": [200, 120, 150, 150, 70, 25, 8, 8], \"number of normal cells\" : 230 } # ----------------------------------------------------------------------------------------------------------------------------- # # # Pack all inputs Input = Data() Input.Solver = Solver_settings Input.Freestream = Freestream Input.Geometry = Geometry_data Input.Mesh = Mesh_data return Input After finishing running the function Input_data() , function aerodynamic_analysis(Input) will be executed using Input_data() as its input to perform the simulation.","title":"Input_Data.py"},{"location":"structure/Input_Data/#input_datapy","text":"In this file, we can setup the simulation by inputting various kinds of variables such as: working_dir which will be changed according to the user's workspace","title":"Input_Data.py"},{"location":"structure/Input_Data/#solver-settings","text":"working_dir = r\"/home/doktorand/Software/PyAeroSweep-Stan-V3/PyAeroSweep/\" Solver_settings = Solver() Solver_settings.working_dir = working_dir Solver_settings.name = 'SU2' # SU2 or Fluent # Solver dimensions # 2d or 3d for SU2 Solver_settings.dimensions = '2d' # Only available for SU2 in 3D # defines half od the shape or a full shape analysis (Only symmetric works for now) Solver_settings.symmetric = True # SST or SA for SU2 Solver_settings.turbulence_model = 'SST' # Number of processors Solver_settings.processors = 1 # Cauchy convergence criteria # Could be either LIFT or DRAG Solver_settings.monitor = \"LIFT\" Solver_settings.tolerance = 5e-7 Solver_settings.max_iterations = 100 Solver_settings.save_frequency = 100 # Warm start # YES or NO Solver_settings.warmstart = 'YES' # SU2 reference config file name which will be updated Solver_settings.config_file = 'Run_airfoil_template.cfg'","title":"Solver Settings"},{"location":"structure/Input_Data/#freestream-settings","text":"The following code block is the setup of Freestream. The air speed (in Mach), altitude (meters) and angle of attack (degrees) can be set as following. In file run_SU2.py, there will be a loop for every possible cases regarding the Freestream Settings Freestream = Data() Freestream.Mach = np.array([0.21,0.25]) Freestream.Altitude = np.array([0,2000]) # in meters Freestream.Angle_of_attack = np.array([0.0,3.0,5.0]) # in degrees","title":"Freestream Settings"},{"location":"structure/Input_Data/#geometry-settings","text":"In this section, we can define the geometry of the airfoil. For 2D case, PARSEC and CST can be used to define the airfoil geometry's and we can also add the definition of trailing edge and leading edge device into the geometry. For 3D case, pygeo will be used to generate the airfoil geometry. Futher information about defining airfoil geometry can be found in these links: CST PARSEC Code Example Geometry_data = Geometry() # Geometry to analyze ''' Could be airfoil or wing Airfoils can be parametrically defined using the PARSEC methods Wings are defined only using the existing CAD file and work either for straight tapered wings with or without the kink''' Geometry_data.type = 'airfoil' # Reference values Geometry_data.reference_values = { \"Area\" : 2.62, \"Length\" : 2.62, \"Depth\" : 1, \"Point\" : [0.25*2.62,0,0] # reference point about which the moment is taken } # Flag to use PARSEC parametrization or to use already existing airfoils Geometry_data.PARSEC = True # Airfoil files are used either to write PARSEC-generated airfoil and then read by Pointwise or to read directly from them Geometry_data.airfoil_files = { \"upper\" : \"main_airfoil_upper.dat\", \"lower\" : \"main_airfoil_lower.dat\" } segment = Segment() segment.tag = 'section_1' segment.spanwise_location = 0 segment.chord = 7.760 segment.incidence = 2 segment.dihedral = 3 segment.leading_edge_sweep = 30 segment.Airfoil.files = { \"upper\" : \"main_airfoil_upper_1.dat\", \"lower\" : \"main_airfoil_lower_1.dat\" } segment.Airfoil.PARSEC = { \"rle\" : 0.0084, # Main airfoil LE radius \"x_pre\" : 0.458080577545180, # x-location of the crest on the pressure side \"y_pre\" : -0.04553160030118, # y-location of the crest on the pressure side \"d2ydx2_pre\" : 0.554845554794938, # curvature of the crest on the pressure side \"th_pre\" : -9.649803736, # trailing edge angle on the pressure side [deg] \"x_suc\" : 0.46036604, # x-location of the crest on the suction side \"y_suc\" : 0.06302395539, # y-location of the crest on the suction side \"d2ydx2_suc\" : -0.361421420, # curvature of the crest on the suction side \"th_suc\" : -12.391677695858 # trailing edge angle on the suction side [deg] } Geometry_data.Segments.append(segment)","title":"Geometry Settings"},{"location":"structure/Input_Data/#mesh-settings","text":"Mesh_data = Mesh() # Flag to mesh the shape or not Mesh_data.meshing = True # Mesh type Mesh_data.structured = True # Defined the OS in which Pointwise is used # WINDOWS or Linux Mesh_data.operating_system = 'Linux' # Pointwise tclsh directory used in Windows Mesh_data.tclsh_directory = r\"/home/doktorand/Fidelity/Pointwise/Pointwise2022.1\" # Desired Y+ value Mesh_data.Yplus = 1.0 # Define the Glyph template to use for meshing Mesh_data.glyph_file = \"mesh_clean_airfoil_SU2.glf\" # Mesh filename for either the newly generated mesh or an eisting mesh Mesh_data.filename = 'su2meshEx.su2' # Define far-field Mesh_data.far_field = 100 * Geometry_data.reference_values[\"Length\"] Mesh_data.airfoil_mesh_settings = { \"LE_spacing\" : 0.001, # Airfoil leading edge spacing \"TE_spacing\" : 0.0005, # Airfoil trailing edge spacing \"flap_cluster\" : 0.005, \"connector dimensions\" : [200, 200, 8], # \"connector_dimensions\": [200, 120, 150, 150, 70, 25, 8, 8], \"number of normal cells\" : 230 }","title":"Mesh Settings"},{"location":"structure/Input_Data/#packing-all-the-inputs","text":"Input = Data() Input.Solver = Solver_settings Input.Freestream = Freestream Input.Geometry = Geometry_data Input.Mesh = Mesh_data","title":"Packing all the inputs"},{"location":"structure/Input_Data/#summary-code-example","text":"At the end, the function Input_data() is defined as import os import subprocess import numpy as np from Core.Data import Data from Components.Solver import Solver from Components.Geometry import Geometry from Components.Geometry.Wing.Segment import Segment from Components.Mesh import Mesh from Run_aerodynamic_analysis import run_aerodynamic_analysis def Input_data(): working_dir = r\"/home/doktorand/Software/PyAeroSweep-Stan-V3/PyAeroSweep/\" # ------------------------------- SOLVER SETTINGS ----------------------------------------------------------- # # Solver_settings = Solver() Solver_settings.working_dir = working_dir Solver_settings.name = 'SU2' # SU2 or Fluent # Solver dimensions # 2d or 3d for SU2 Solver_settings.dimensions = '2d' # Only available for SU2 in 3D # defines half od the shape or a full shape analysis (Only symmetric works for now) Solver_settings.symmetric = True # SST or SA for SU2 Solver_settings.turbulence_model = 'SST' # Number of processors Solver_settings.processors = 1 # Cauchy convergence criteria # Could be either LIFT or DRAG Solver_settings.monitor = \"LIFT\" Solver_settings.tolerance = 5e-7 Solver_settings.max_iterations = 100 Solver_settings.save_frequency = 100 # Warm start # YES or NO Solver_settings.warmstart = 'YES' # SU2 reference config file name which will be updated Solver_settings.config_file = 'Run_airfoil_template.cfg' # ------------------------------- FREESTREAM SETTINGS ------------------------------------------------------- # # Freestream = Data() Freestream.Mach = np.array([0.21,0.25]) Freestream.Altitude = np.array([0,2000]) # in meters Freestream.Angle_of_attack = np.array([0.0,3.0,5.0]) # in degrees # ------------------------------- GEOMETRY SETTINGS --------------------------------------------------------- # # Geometry_data = Geometry() # Geometry to analyze ''' Could be airfoil or wing Airfoils can be parametrically defined using the PARSEC methods Wings are defined only using the existing CAD file and work either for straight tapered wings with or without the kink''' Geometry_data.type = 'airfoil' # Reference values Geometry_data.reference_values = { \"Area\" : 2.62, \"Length\" : 2.62, \"Depth\" : 1, \"Point\" : [0.25*2.62,0,0] # reference point about which the moment is taken } # Flag to use PARSEC parametrization or to use already existing airfoils Geometry_data.PARSEC = True # Airfoil files are used either to write PARSEC-generated airfoil and then read by Pointwise or to read directly from them Geometry_data.airfoil_files = { \"upper\" : \"main_airfoil_upper.dat\", \"lower\" : \"main_airfoil_lower.dat\" } segment = Segment() segment.tag = 'section_1' segment.spanwise_location = 0 segment.chord = 7.760 segment.incidence = 2 segment.dihedral = 3 segment.leading_edge_sweep = 30 segment.Airfoil.files = { \"upper\" : \"main_airfoil_upper_1.dat\", \"lower\" : \"main_airfoil_lower_1.dat\" } segment.Airfoil.PARSEC = { \"rle\" : 0.0084, # Main airfoil LE radius \"x_pre\" : 0.458080577545180, # x-location of the crest on the pressure side \"y_pre\" : -0.04553160030118, # y-location of the crest on the pressure side \"d2ydx2_pre\" : 0.554845554794938, # curvature of the crest on the pressure side \"th_pre\" : -9.649803736, # trailing edge angle on the pressure side [deg] \"x_suc\" : 0.46036604, # x-location of the crest on the suction side \"y_suc\" : 0.06302395539, # y-location of the crest on the suction side \"d2ydx2_suc\" : -0.361421420, # curvature of the crest on the suction side \"th_suc\" : -12.391677695858 # trailing edge angle on the suction side [deg] } Geometry_data.Segments.append(segment) # ------------------------------- MESH SETTINGS ---------------------------------------------------------------- # # Mesh_data = Mesh() # Flag to mesh the shape or not Mesh_data.meshing = True # Mesh type Mesh_data.structured = True # Defined the OS in which Pointwise is used # WINDOWS or Linux Mesh_data.operating_system = 'Linux' # Pointwise tclsh directory used in Windows Mesh_data.tclsh_directory = r\"/home/doktorand/Fidelity/Pointwise/Pointwise2022.1\" # Desired Y+ value Mesh_data.Yplus = 1.0 # Define the Glyph template to use for meshing Mesh_data.glyph_file = \"mesh_clean_airfoil_SU2.glf\" # Mesh filename for either the newly generated mesh or an eisting mesh Mesh_data.filename = 'su2meshEx.su2' # Define far-field Mesh_data.far_field = 100 * Geometry_data.reference_values[\"Length\"] Mesh_data.airfoil_mesh_settings = { \"LE_spacing\" : 0.001, # Airfoil leading edge spacing \"TE_spacing\" : 0.0005, # Airfoil trailing edge spacing \"flap_cluster\" : 0.005, \"connector dimensions\" : [200, 200, 8], # \"connector_dimensions\": [200, 120, 150, 150, 70, 25, 8, 8], \"number of normal cells\" : 230 } # ----------------------------------------------------------------------------------------------------------------------------- # # # Pack all inputs Input = Data() Input.Solver = Solver_settings Input.Freestream = Freestream Input.Geometry = Geometry_data Input.Mesh = Mesh_data return Input After finishing running the function Input_data() , function aerodynamic_analysis(Input) will be executed using Input_data() as its input to perform the simulation.","title":"Summary Code Example"},{"location":"structure/Methods/","text":"Methods","title":"Methods"},{"location":"structure/Methods/#methods","text":"","title":"Methods"},{"location":"structure/Run_aero/","text":"run_aerodynamic_analysis(Input) Steps Unpack all inputs Run the airfoil generation script in a separate directory (using pygeo if 3d case, else parsec or cst) Generate Mesh or use existing mesh Solve using SU2 run_SU2.py solve() Steps For each combination of altitudes, angles of attack and mach in freestream setting, firstly check the warmstart condition and retrieve filename using run_SU2_config function Create directory of the results Run the solver parallelly using MPI, results will be written in SU2_output.log Read results and store it in excel run_SU2_config() Steps 1. get standard atmospheric and reference properties and reynold number Note: CST and Parsec are methods for parameterizing the airfoil Note: Components/Wing/Geometry/Segment/create_Parsec Note: Find the part the show the plot of the airfoil and save it as pdf -> it's in the create_parsec or create_cst part","title":"Run_aerodynamic_analysis.py"},{"location":"structure/Run_aero/#run_aerodynamic_analysisinput","text":"Steps Unpack all inputs Run the airfoil generation script in a separate directory (using pygeo if 3d case, else parsec or cst) Generate Mesh or use existing mesh Solve using SU2","title":"run_aerodynamic_analysis(Input)"},{"location":"structure/Run_aero/#run_su2py","text":"","title":"run_SU2.py"},{"location":"structure/Run_aero/#solve","text":"Steps For each combination of altitudes, angles of attack and mach in freestream setting, firstly check the warmstart condition and retrieve filename using run_SU2_config function Create directory of the results Run the solver parallelly using MPI, results will be written in SU2_output.log Read results and store it in excel","title":"solve()"},{"location":"structure/Run_aero/#run_su2_config","text":"Steps 1. get standard atmospheric and reference properties and reynold number Note: CST and Parsec are methods for parameterizing the airfoil Note: Components/Wing/Geometry/Segment/create_Parsec Note: Find the part the show the plot of the airfoil and save it as pdf -> it's in the create_parsec or create_cst part","title":"run_SU2_config()"},{"location":"structure/Geometry/CST_Definition/","text":"CST Definition Variable Decscription upper upper surface CST coefficients (specify dvNum to define how many) lower lower surface CST coefficients (specify dvNum to define how many) N1 first class shape parameter for both upper and lower surfaces (adds a single DV) N2 second class shape parameter for both upper and lower surfaces (adds a single DV) N1_upper first class shape parameters for upper surface (adds a single DV) N1_lower first class shape parameters for lower surface (adds a single DV) N2_upper second class shape parameters for upper surface (adds a single DV) N2_lower second class shape parameters for lower surface (adds a single DV) chord chord length in whatever units the point set length is defined and scaled to keep the leading edge at the same position (adds a single DV) Geometry_data = Geometry() # Geometry to analyze ''' Could be airfoil or wing Airfoils can be parametrically defined using the PARSEC methods Wings are defined only using the existing CAD file and work either for straight tapered wings with or without the kink''' Geometry_data.type = 'airfoil' # Reference values Geometry_data.reference_values = { \"Area\" : 2.62, \"Length\" : 2.62, \"Depth\" : 1, \"Point\" : [0.25*2.62,0,0] # reference point about which the moment is taken } segment = Segment() segment.tag = 'section_1' segment.chord = 2.62 segment.Airfoil.files = { \"upper\" : \"main_airfoil_upper_1.dat\", \"lower\" : \"main_airfoil_lower_1.dat\" } segment.Airfoil.CST = { \"upper\" :[0.20095, 0.26864, 0.10933, 0.29307,\\ 0.12099, 0.21197, 0.18002, 0.18408], \"lower\" :[-0.20095, 0.05433, -0.46373, 0.25546,\\ -0.40375, 0.01032, -0.14109, -0.11217], \"N1 upper\" : 0.5, \"N1 lower\" : 0.5, \"N2 upper\" : 1.0, \"N2 lower\" : 1.0, \"yte upper\" : 0.001, \"yte lower\" : -0.001 } Geometry_data.Segments.append(segment) segment.plot_airfoil = True","title":"CST"},{"location":"structure/Geometry/CST_Definition/#cst-definition","text":"Variable Decscription upper upper surface CST coefficients (specify dvNum to define how many) lower lower surface CST coefficients (specify dvNum to define how many) N1 first class shape parameter for both upper and lower surfaces (adds a single DV) N2 second class shape parameter for both upper and lower surfaces (adds a single DV) N1_upper first class shape parameters for upper surface (adds a single DV) N1_lower first class shape parameters for lower surface (adds a single DV) N2_upper second class shape parameters for upper surface (adds a single DV) N2_lower second class shape parameters for lower surface (adds a single DV) chord chord length in whatever units the point set length is defined and scaled to keep the leading edge at the same position (adds a single DV) Geometry_data = Geometry() # Geometry to analyze ''' Could be airfoil or wing Airfoils can be parametrically defined using the PARSEC methods Wings are defined only using the existing CAD file and work either for straight tapered wings with or without the kink''' Geometry_data.type = 'airfoil' # Reference values Geometry_data.reference_values = { \"Area\" : 2.62, \"Length\" : 2.62, \"Depth\" : 1, \"Point\" : [0.25*2.62,0,0] # reference point about which the moment is taken } segment = Segment() segment.tag = 'section_1' segment.chord = 2.62 segment.Airfoil.files = { \"upper\" : \"main_airfoil_upper_1.dat\", \"lower\" : \"main_airfoil_lower_1.dat\" } segment.Airfoil.CST = { \"upper\" :[0.20095, 0.26864, 0.10933, 0.29307,\\ 0.12099, 0.21197, 0.18002, 0.18408], \"lower\" :[-0.20095, 0.05433, -0.46373, 0.25546,\\ -0.40375, 0.01032, -0.14109, -0.11217], \"N1 upper\" : 0.5, \"N1 lower\" : 0.5, \"N2 upper\" : 1.0, \"N2 lower\" : 1.0, \"yte upper\" : 0.001, \"yte lower\" : -0.001 } Geometry_data.Segments.append(segment) segment.plot_airfoil = True","title":"CST Definition"},{"location":"structure/Geometry/PARSEC_Definition/","text":"PARSEC Definition The following image explain the meaning of the parameters using to define the PARSEC airfoil. To compare the variables [picture to be revised] Description Symbol(Picture) Variable (Code) Leading Edge Radius R_{LE} rle Upper Crest Abscissa X_{UP} x_suc Upper Crest Ordinate Z_{UP} y_suc Upper Crest Curvature Z_{XXUP} d2ydx2_suc Lower Crest Abscissa X_{LO} x_pre Lower Crest Ordinate Z_{LO} y_pre Lower Crest Curvature Z_{XXLO} d2ydx2_pre Trailing Edge Ordinate Z_{TE} ( yte upper + yte lower )/2 Trailing Edge Thickness \u0394Z_{TE} yte upper - yte lower Trailing Edge Direction \u03b1_{TE} th_suc Trailing Edge Wedge Angle \u03b2_{TE} th_suc + th_pre Geometry_data = Geometry() # Geometry to analyze ''' Could be airfoil or wing Airfoils can be parametrically defined using the PARSEC methods Wings are defined only using the existing CAD file and work either for straight tapered wings with or without the kink''' Geometry_data.type = 'airfoil' # Reference values Geometry_data.reference_values = { \"Area\" : 2.62, \"Length\" : 2.62, \"Depth\" : 1, \"Point\" : [0.25*2.62,0,0] # reference point about which the moment is taken } segment = Segment() segment.tag = 'section_1' segment.spanwise_location = 0 segment.chord = 2.62 segment.Airfoil.files = { \"upper\" : \"main_airfoil_upper_1.dat\", \"lower\" : \"main_airfoil_lower_1.dat\" } segment.Airfoil.PARSEC = { \"rle\" : 0.0084, # Main airfoil LE radius \"x_pre\" : 0.458080577545180, # x-location of the crest on the pressure side \"y_pre\" : -0.04553160030118, # y-location of the crest on the pressure side \"d2ydx2_pre\" : 0.554845554794938, # curvature of the crest on the pressure side \"th_pre\" : -9.649803736, # trailing edge angle on the pressure side [deg] \"x_suc\" : 0.46036604, # x-location of the crest on the suction side \"y_suc\" : 0.06302395539, # y-location of the crest on the suction side \"d2ydx2_suc\" : -0.361421420, # curvature of the crest on the suction side \"th_suc\" : -12.391677695858, # trailing edge angle on the suction side [deg] \"yte upper\" : 0.002, \"yte lower\" : -0.002 } Geometry_data.Segments.append(segment) segment.plot_airfoil = True","title":"PARSEC"},{"location":"structure/Geometry/PARSEC_Definition/#parsec-definition","text":"The following image explain the meaning of the parameters using to define the PARSEC airfoil. To compare the variables [picture to be revised] Description Symbol(Picture) Variable (Code) Leading Edge Radius R_{LE} rle Upper Crest Abscissa X_{UP} x_suc Upper Crest Ordinate Z_{UP} y_suc Upper Crest Curvature Z_{XXUP} d2ydx2_suc Lower Crest Abscissa X_{LO} x_pre Lower Crest Ordinate Z_{LO} y_pre Lower Crest Curvature Z_{XXLO} d2ydx2_pre Trailing Edge Ordinate Z_{TE} ( yte upper + yte lower )/2 Trailing Edge Thickness \u0394Z_{TE} yte upper - yte lower Trailing Edge Direction \u03b1_{TE} th_suc Trailing Edge Wedge Angle \u03b2_{TE} th_suc + th_pre Geometry_data = Geometry() # Geometry to analyze ''' Could be airfoil or wing Airfoils can be parametrically defined using the PARSEC methods Wings are defined only using the existing CAD file and work either for straight tapered wings with or without the kink''' Geometry_data.type = 'airfoil' # Reference values Geometry_data.reference_values = { \"Area\" : 2.62, \"Length\" : 2.62, \"Depth\" : 1, \"Point\" : [0.25*2.62,0,0] # reference point about which the moment is taken } segment = Segment() segment.tag = 'section_1' segment.spanwise_location = 0 segment.chord = 2.62 segment.Airfoil.files = { \"upper\" : \"main_airfoil_upper_1.dat\", \"lower\" : \"main_airfoil_lower_1.dat\" } segment.Airfoil.PARSEC = { \"rle\" : 0.0084, # Main airfoil LE radius \"x_pre\" : 0.458080577545180, # x-location of the crest on the pressure side \"y_pre\" : -0.04553160030118, # y-location of the crest on the pressure side \"d2ydx2_pre\" : 0.554845554794938, # curvature of the crest on the pressure side \"th_pre\" : -9.649803736, # trailing edge angle on the pressure side [deg] \"x_suc\" : 0.46036604, # x-location of the crest on the suction side \"y_suc\" : 0.06302395539, # y-location of the crest on the suction side \"d2ydx2_suc\" : -0.361421420, # curvature of the crest on the suction side \"th_suc\" : -12.391677695858, # trailing edge angle on the suction side [deg] \"yte upper\" : 0.002, \"yte lower\" : -0.002 } Geometry_data.Segments.append(segment) segment.plot_airfoil = True","title":"PARSEC Definition"},{"location":"testcases/Clean_airfoil_CST/","text":"Clean Airfoil CST Clean Airfoil CST test case is the simulation of the air flow through the clean airfoil (without flaps, just airfoil). CST (Class-Shape Transformation) is one way to define the geometry of the airfoil. For futher information follow this link CST Airfoil Geometry Steps: Setting the input for the simulation The geometry is defined using CST In function run_aerodynamic_analysis , Generate the file for geometry and mesh the geometry Solve using SU2 Read results from the runtime log and save them as csv and vtu Inputs import numpy as np from Core.Data import Data from Components.Solver import Solver from Components.Geometry import Geometry from Components.Geometry.Wing.Segment import Segment from Components.Mesh import Mesh from Run_aerodynamic_analysis import run_aerodynamic_analysis def Input_data(): working_dir = r\"/home/doktorand/Software/PyAeroSweep-Stan-V3/PyAeroSweep/Test_Cases/Clean_airfoil_CST\" # ------------------------------- SOLVER SETTINGS ----------------------------------------------------------- # # Solver_settings = Solver() Solver_settings.working_dir = working_dir Solver_settings.name = 'SU2' # SU2 or Fluent # Solver dimensions # 2d or 3d for SU2 Solver_settings.dimensions = '2d' # Only available for SU2 in 3D # defines half od the shape or a full shape analysis (Only symmetric works for now) Solver_settings.symmetric = True # SST or SA for SU2 Solver_settings.turbulence_model = 'SST' # Number of processors Solver_settings.processors = 4 # Cauchy convergence criteria # Could be either LIFT or DRAG Solver_settings.monitor = \"LIFT\" Solver_settings.tolerance = 5e-7 Solver_settings.max_iterations = 100 Solver_settings.save_frequency = 100 # Warm start # YES or NO Solver_settings.warmstart = 'YES' # SU2 reference config file name which will be updated Solver_settings.config_file = 'Run_airfoil_template.cfg' # ------------------------------- FREESTREAM SETTINGS ------------------------------------------------------- # # Freestream = Data() Freestream.Mach = np.array([0.21,0.25]) Freestream.Altitude = np.array([0,2000]) # in meters Freestream.Angle_of_attack = np.array([0.0,3.0,5.0]) # in degrees # ------------------------------- GEOMETRY SETTINGS --------------------------------------------------------- # # Geometry_data = Geometry() # Geometry to analyze ''' Could be airfoil or wing Airfoils can be parametrically defined using the PARSEC methods Wings are defined only using the existing CAD file and work either for straight tapered wings with or without the kink''' Geometry_data.type = 'airfoil' # Reference values Geometry_data.reference_values = { \"Area\" : 2.62, \"Length\" : 2.62, \"Depth\" : 1, \"Point\" : [0.25*2.62,0,0] # reference point about which the moment is taken } segment = Segment() segment.tag = 'section_1' segment.chord = 2.62 segment.Airfoil.files = { \"upper\" : \"main_airfoil_upper_1.dat\", \"lower\" : \"main_airfoil_lower_1.dat\" } segment.Airfoil.CST = { \"upper\" :[0.20095, 0.26864, 0.10933, 0.29307,\\ 0.12099, 0.21197, 0.18002, 0.18408], \"lower\" :[-0.20095, 0.05433, -0.46373, 0.25546,\\ -0.40375, 0.01032, -0.14109, -0.11217], \"N1 upper\" : 0.5, \"N1 lower\" : 0.5, \"N2 upper\" : 1.0, \"N2 lower\" : 1.0, \"yte upper\" : 0.001, \"yte lower\" : -0.001 } Geometry_data.Segments.append(segment) segment.plot_airfoil = True # ------------------------------- MESH SETTINGS ---------------------------------------------------------------- # # Mesh_data = Mesh() # Flag to mesh the shape or not Mesh_data.meshing = True # Mesh type Mesh_data.structured = True # Defined the OS in which Pointwise is used # WINDOWS or Linux Mesh_data.operating_system = 'Linux' # Pointwise tclsh directory used in Windows Mesh_data.tclsh_directory = r\"/home/doktorand/Fidelity/Pointwise/Pointwise2022.1\" # Desired Y+ value Mesh_data.Yplus = 1.0 # Define the Glyph template to use for meshing Mesh_data.glyph_file = \"mesh_clean_airfoil_SU2.glf\" # Mesh filename for either the newly generated mesh or an eisting mesh Mesh_data.filename = 'su2meshEx.su2' # Define far-field Mesh_data.far_field = 100 * Geometry_data.reference_values[\"Length\"] Mesh_data.airfoil_mesh_settings = { \"LE_spacing\" : 0.001, # Airfoil leading edge spacing \"TE_spacing\" : 0.0005, # Airfoil trailing edge spacing \"flap_cluster\" : 0.005, \"connector dimensions\" : [200, 200, 8], # \"connector_dimensions\": [200, 120, 150, 150, 70, 25, 8, 8], \"number of normal cells\" : 230 } # ----------------------------------------------------------------------------------------------------------------------------- # # # Pack all inputs Input = Data() Input.Solver = Solver_settings Input.Freestream = Freestream Input.Geometry = Geometry_data Input.Mesh = Mesh_data return Input if __name__ == '__main__': Input = Input_data() run_aerodynamic_analysis(Input) Results mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Explanation","title":"Clean_airfoil_CST"},{"location":"testcases/Clean_airfoil_CST/#clean-airfoil-cst","text":"Clean Airfoil CST test case is the simulation of the air flow through the clean airfoil (without flaps, just airfoil). CST (Class-Shape Transformation) is one way to define the geometry of the airfoil. For futher information follow this link CST Airfoil Geometry Steps: Setting the input for the simulation The geometry is defined using CST In function run_aerodynamic_analysis , Generate the file for geometry and mesh the geometry Solve using SU2 Read results from the runtime log and save them as csv and vtu","title":"Clean Airfoil CST"},{"location":"testcases/Clean_airfoil_CST/#inputs","text":"import numpy as np from Core.Data import Data from Components.Solver import Solver from Components.Geometry import Geometry from Components.Geometry.Wing.Segment import Segment from Components.Mesh import Mesh from Run_aerodynamic_analysis import run_aerodynamic_analysis def Input_data(): working_dir = r\"/home/doktorand/Software/PyAeroSweep-Stan-V3/PyAeroSweep/Test_Cases/Clean_airfoil_CST\" # ------------------------------- SOLVER SETTINGS ----------------------------------------------------------- # # Solver_settings = Solver() Solver_settings.working_dir = working_dir Solver_settings.name = 'SU2' # SU2 or Fluent # Solver dimensions # 2d or 3d for SU2 Solver_settings.dimensions = '2d' # Only available for SU2 in 3D # defines half od the shape or a full shape analysis (Only symmetric works for now) Solver_settings.symmetric = True # SST or SA for SU2 Solver_settings.turbulence_model = 'SST' # Number of processors Solver_settings.processors = 4 # Cauchy convergence criteria # Could be either LIFT or DRAG Solver_settings.monitor = \"LIFT\" Solver_settings.tolerance = 5e-7 Solver_settings.max_iterations = 100 Solver_settings.save_frequency = 100 # Warm start # YES or NO Solver_settings.warmstart = 'YES' # SU2 reference config file name which will be updated Solver_settings.config_file = 'Run_airfoil_template.cfg' # ------------------------------- FREESTREAM SETTINGS ------------------------------------------------------- # # Freestream = Data() Freestream.Mach = np.array([0.21,0.25]) Freestream.Altitude = np.array([0,2000]) # in meters Freestream.Angle_of_attack = np.array([0.0,3.0,5.0]) # in degrees # ------------------------------- GEOMETRY SETTINGS --------------------------------------------------------- # # Geometry_data = Geometry() # Geometry to analyze ''' Could be airfoil or wing Airfoils can be parametrically defined using the PARSEC methods Wings are defined only using the existing CAD file and work either for straight tapered wings with or without the kink''' Geometry_data.type = 'airfoil' # Reference values Geometry_data.reference_values = { \"Area\" : 2.62, \"Length\" : 2.62, \"Depth\" : 1, \"Point\" : [0.25*2.62,0,0] # reference point about which the moment is taken } segment = Segment() segment.tag = 'section_1' segment.chord = 2.62 segment.Airfoil.files = { \"upper\" : \"main_airfoil_upper_1.dat\", \"lower\" : \"main_airfoil_lower_1.dat\" } segment.Airfoil.CST = { \"upper\" :[0.20095, 0.26864, 0.10933, 0.29307,\\ 0.12099, 0.21197, 0.18002, 0.18408], \"lower\" :[-0.20095, 0.05433, -0.46373, 0.25546,\\ -0.40375, 0.01032, -0.14109, -0.11217], \"N1 upper\" : 0.5, \"N1 lower\" : 0.5, \"N2 upper\" : 1.0, \"N2 lower\" : 1.0, \"yte upper\" : 0.001, \"yte lower\" : -0.001 } Geometry_data.Segments.append(segment) segment.plot_airfoil = True # ------------------------------- MESH SETTINGS ---------------------------------------------------------------- # # Mesh_data = Mesh() # Flag to mesh the shape or not Mesh_data.meshing = True # Mesh type Mesh_data.structured = True # Defined the OS in which Pointwise is used # WINDOWS or Linux Mesh_data.operating_system = 'Linux' # Pointwise tclsh directory used in Windows Mesh_data.tclsh_directory = r\"/home/doktorand/Fidelity/Pointwise/Pointwise2022.1\" # Desired Y+ value Mesh_data.Yplus = 1.0 # Define the Glyph template to use for meshing Mesh_data.glyph_file = \"mesh_clean_airfoil_SU2.glf\" # Mesh filename for either the newly generated mesh or an eisting mesh Mesh_data.filename = 'su2meshEx.su2' # Define far-field Mesh_data.far_field = 100 * Geometry_data.reference_values[\"Length\"] Mesh_data.airfoil_mesh_settings = { \"LE_spacing\" : 0.001, # Airfoil leading edge spacing \"TE_spacing\" : 0.0005, # Airfoil trailing edge spacing \"flap_cluster\" : 0.005, \"connector dimensions\" : [200, 200, 8], # \"connector_dimensions\": [200, 120, 150, 150, 70, 25, 8, 8], \"number of normal cells\" : 230 } # ----------------------------------------------------------------------------------------------------------------------------- # # # Pack all inputs Input = Data() Input.Solver = Solver_settings Input.Freestream = Freestream Input.Geometry = Geometry_data Input.Mesh = Mesh_data return Input if __name__ == '__main__': Input = Input_data() run_aerodynamic_analysis(Input)","title":"Inputs"},{"location":"testcases/Clean_airfoil_CST/#results","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Results"},{"location":"testcases/Clean_airfoil_CST/#explanation","text":"","title":"Explanation"},{"location":"testcases/Clean_airfoil_Full/","text":"Clean Airfoil Full Clean Airfoil Full test case is the simulation of the air flow through the clean airfoil (without flaps, just airfoil). In this case, PARSEC airfoil parameterized method is used to create the airfoil geometry. Inputs import numpy as np from Core.Data import Data from Components.Solver import Solver from Components.Geometry import Geometry from Components.Geometry.Wing.Segment import Segment from Components.Mesh import Mesh from Run_aerodynamic_analysis import run_aerodynamic_analysis def Input_data(): working_dir = r\"/home/doktorand/Software/PyAeroSweep-Stan-V3/PyAeroSweep/Test_Cases/Clean_airfoil_Full\" # ------------------------------- SOLVER SETTINGS ----------------------------------------------------------- # # Solver_settings = Solver() Solver_settings.working_dir = working_dir Solver_settings.name = 'SU2' # SU2 or Fluent # Solver dimensions # 2d or 3d for SU2 Solver_settings.dimensions = '2d' # Only available for SU2 in 3D # defines half od the shape or a full shape analysis (Only symmetric works for now) Solver_settings.symmetric = True # SST or SA for SU2 Solver_settings.turbulence_model = 'SST' # Number of processors Solver_settings.processors = 4 # Cauchy convergence criteria # Could be either LIFT or DRAG Solver_settings.monitor = \"LIFT\" Solver_settings.tolerance = 5e-7 Solver_settings.max_iterations = 100 Solver_settings.save_frequency = 100 # Warm start # YES or NO Solver_settings.warmstart = 'YES' # SU2 reference config file name which will be updated Solver_settings.config_file = 'Run_airfoil_template.cfg' # ------------------------------- FREESTREAM SETTINGS ------------------------------------------------------- # # Freestream = Data() Freestream.Mach = np.array([0.21,0.25]) Freestream.Altitude = np.array([0,2000]) # in meters Freestream.Angle_of_attack = np.array([0.0,3.0,5.0]) # in degrees # ------------------------------- GEOMETRY SETTINGS --------------------------------------------------------- # # Geometry_data = Geometry() # Geometry to analyze ''' Could be airfoil or wing Airfoils can be parametrically defined using the PARSEC methods Wings are defined only using the existing CAD file and work either for straight tapered wings with or without the kink''' Geometry_data.type = 'airfoil' # Reference values Geometry_data.reference_values = { \"Area\" : 2.62, \"Length\" : 2.62, \"Depth\" : 1, \"Point\" : [0.25*2.62,0,0] # reference point about which the moment is taken } segment = Segment() segment.tag = 'section_1' segment.spanwise_location = 0 segment.chord = 2.62 segment.Airfoil.files = { \"upper\" : \"main_airfoil_upper_1.dat\", \"lower\" : \"main_airfoil_lower_1.dat\" } segment.Airfoil.PARSEC = { \"rle\" : 0.0084, # Main airfoil LE radius \"x_pre\" : 0.458080577545180, # x-location of the crest on the pressure side \"y_pre\" : -0.04553160030118, # y-location of the crest on the pressure side \"d2ydx2_pre\" : 0.554845554794938, # curvature of the crest on the pressure side \"th_pre\" : -9.649803736, # trailing edge angle on the pressure side [deg] \"x_suc\" : 0.46036604, # x-location of the crest on the suction side \"y_suc\" : 0.06302395539, # y-location of the crest on the suction side \"d2ydx2_suc\" : -0.361421420, # curvature of the crest on the suction side \"th_suc\" : -12.391677695858, # trailing edge angle on the suction side [deg] \"yte upper\" : 0.002, \"yte lower\" : -0.002 } Geometry_data.Segments.append(segment) segment.plot_airfoil = True # ------------------------------- MESH SETTINGS ---------------------------------------------------------------- # # Mesh_data = Mesh() # Flag to mesh the shape or not Mesh_data.meshing = True # Mesh type Mesh_data.structured = True # Defined the OS in which Pointwise is used # WINDOWS or Linux Mesh_data.operating_system = 'Linux' # Pointwise tclsh directory used in Windows Mesh_data.tclsh_directory = r\"/home/doktorand/Fidelity/Pointwise/Pointwise2022.1\" # Desired Y+ value Mesh_data.Yplus = 1.0 # Define the Glyph template to use for meshing Mesh_data.glyph_file = \"mesh_clean_airfoil_SU2.glf\" # Mesh filename for either the newly generated mesh or an eisting mesh Mesh_data.filename = 'su2meshEx.su2' # Define far-field Mesh_data.far_field = 100 * Geometry_data.reference_values[\"Length\"] Mesh_data.airfoil_mesh_settings = { \"LE_spacing\" : 0.001, # Airfoil leading edge spacing \"TE_spacing\" : 0.0005, # Airfoil trailing edge spacing \"flap_cluster\" : 0.005, \"connector dimensions\" : [200, 200, 8], # \"connector_dimensions\": [200, 120, 150, 150, 70, 25, 8, 8], \"number of normal cells\" : 230 } # ----------------------------------------------------------------------------------------------------------------------------- # # # Pack all inputs Input = Data() Input.Solver = Solver_settings Input.Freestream = Freestream Input.Geometry = Geometry_data Input.Mesh = Mesh_data return Input if __name__ == '__main__': Input = Input_data() run_aerodynamic_analysis(Input) Results mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Explanation","title":"Clean_airfoil_Full"},{"location":"testcases/Clean_airfoil_Full/#clean-airfoil-full","text":"Clean Airfoil Full test case is the simulation of the air flow through the clean airfoil (without flaps, just airfoil). In this case, PARSEC airfoil parameterized method is used to create the airfoil geometry.","title":"Clean Airfoil Full"},{"location":"testcases/Clean_airfoil_Full/#inputs","text":"import numpy as np from Core.Data import Data from Components.Solver import Solver from Components.Geometry import Geometry from Components.Geometry.Wing.Segment import Segment from Components.Mesh import Mesh from Run_aerodynamic_analysis import run_aerodynamic_analysis def Input_data(): working_dir = r\"/home/doktorand/Software/PyAeroSweep-Stan-V3/PyAeroSweep/Test_Cases/Clean_airfoil_Full\" # ------------------------------- SOLVER SETTINGS ----------------------------------------------------------- # # Solver_settings = Solver() Solver_settings.working_dir = working_dir Solver_settings.name = 'SU2' # SU2 or Fluent # Solver dimensions # 2d or 3d for SU2 Solver_settings.dimensions = '2d' # Only available for SU2 in 3D # defines half od the shape or a full shape analysis (Only symmetric works for now) Solver_settings.symmetric = True # SST or SA for SU2 Solver_settings.turbulence_model = 'SST' # Number of processors Solver_settings.processors = 4 # Cauchy convergence criteria # Could be either LIFT or DRAG Solver_settings.monitor = \"LIFT\" Solver_settings.tolerance = 5e-7 Solver_settings.max_iterations = 100 Solver_settings.save_frequency = 100 # Warm start # YES or NO Solver_settings.warmstart = 'YES' # SU2 reference config file name which will be updated Solver_settings.config_file = 'Run_airfoil_template.cfg' # ------------------------------- FREESTREAM SETTINGS ------------------------------------------------------- # # Freestream = Data() Freestream.Mach = np.array([0.21,0.25]) Freestream.Altitude = np.array([0,2000]) # in meters Freestream.Angle_of_attack = np.array([0.0,3.0,5.0]) # in degrees # ------------------------------- GEOMETRY SETTINGS --------------------------------------------------------- # # Geometry_data = Geometry() # Geometry to analyze ''' Could be airfoil or wing Airfoils can be parametrically defined using the PARSEC methods Wings are defined only using the existing CAD file and work either for straight tapered wings with or without the kink''' Geometry_data.type = 'airfoil' # Reference values Geometry_data.reference_values = { \"Area\" : 2.62, \"Length\" : 2.62, \"Depth\" : 1, \"Point\" : [0.25*2.62,0,0] # reference point about which the moment is taken } segment = Segment() segment.tag = 'section_1' segment.spanwise_location = 0 segment.chord = 2.62 segment.Airfoil.files = { \"upper\" : \"main_airfoil_upper_1.dat\", \"lower\" : \"main_airfoil_lower_1.dat\" } segment.Airfoil.PARSEC = { \"rle\" : 0.0084, # Main airfoil LE radius \"x_pre\" : 0.458080577545180, # x-location of the crest on the pressure side \"y_pre\" : -0.04553160030118, # y-location of the crest on the pressure side \"d2ydx2_pre\" : 0.554845554794938, # curvature of the crest on the pressure side \"th_pre\" : -9.649803736, # trailing edge angle on the pressure side [deg] \"x_suc\" : 0.46036604, # x-location of the crest on the suction side \"y_suc\" : 0.06302395539, # y-location of the crest on the suction side \"d2ydx2_suc\" : -0.361421420, # curvature of the crest on the suction side \"th_suc\" : -12.391677695858, # trailing edge angle on the suction side [deg] \"yte upper\" : 0.002, \"yte lower\" : -0.002 } Geometry_data.Segments.append(segment) segment.plot_airfoil = True # ------------------------------- MESH SETTINGS ---------------------------------------------------------------- # # Mesh_data = Mesh() # Flag to mesh the shape or not Mesh_data.meshing = True # Mesh type Mesh_data.structured = True # Defined the OS in which Pointwise is used # WINDOWS or Linux Mesh_data.operating_system = 'Linux' # Pointwise tclsh directory used in Windows Mesh_data.tclsh_directory = r\"/home/doktorand/Fidelity/Pointwise/Pointwise2022.1\" # Desired Y+ value Mesh_data.Yplus = 1.0 # Define the Glyph template to use for meshing Mesh_data.glyph_file = \"mesh_clean_airfoil_SU2.glf\" # Mesh filename for either the newly generated mesh or an eisting mesh Mesh_data.filename = 'su2meshEx.su2' # Define far-field Mesh_data.far_field = 100 * Geometry_data.reference_values[\"Length\"] Mesh_data.airfoil_mesh_settings = { \"LE_spacing\" : 0.001, # Airfoil leading edge spacing \"TE_spacing\" : 0.0005, # Airfoil trailing edge spacing \"flap_cluster\" : 0.005, \"connector dimensions\" : [200, 200, 8], # \"connector_dimensions\": [200, 120, 150, 150, 70, 25, 8, 8], \"number of normal cells\" : 230 } # ----------------------------------------------------------------------------------------------------------------------------- # # # Pack all inputs Input = Data() Input.Solver = Solver_settings Input.Freestream = Freestream Input.Geometry = Geometry_data Input.Mesh = Mesh_data return Input if __name__ == '__main__': Input = Input_data() run_aerodynamic_analysis(Input)","title":"Inputs"},{"location":"testcases/Clean_airfoil_Full/#results","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Results"},{"location":"testcases/Clean_airfoil_Full/#explanation","text":"","title":"Explanation"},{"location":"testcases/Flapped_airfoil_full/","text":"Clean Airfoile CST [Description here] Inputs import numpy as np from Core.Data import Data from Components.Solver import Solver from Components.Geometry import Geometry from Components.Geometry.Wing.Segment import Segment from Components.Mesh import Mesh from Run_aerodynamic_analysis import run_aerodynamic_analysis def Input_data(): working_dir = r\"/home/doktorand/Software/PyAeroSweep-Stan-V3/PyAeroSweep/Test_Cases/Clean_airfoil_CST\" # ------------------------------- SOLVER SETTINGS ----------------------------------------------------------- # # Solver_settings = Solver() Solver_settings.working_dir = working_dir Solver_settings.name = 'SU2' # SU2 or Fluent # Solver dimensions # 2d or 3d for SU2 Solver_settings.dimensions = '2d' # Only available for SU2 in 3D # defines half od the shape or a full shape analysis (Only symmetric works for now) Solver_settings.symmetric = True # SST or SA for SU2 Solver_settings.turbulence_model = 'SST' # Number of processors Solver_settings.processors = 4 # Cauchy convergence criteria # Could be either LIFT or DRAG Solver_settings.monitor = \"LIFT\" Solver_settings.tolerance = 5e-7 Solver_settings.max_iterations = 100 Solver_settings.save_frequency = 100 # Warm start # YES or NO Solver_settings.warmstart = 'YES' # SU2 reference config file name which will be updated Solver_settings.config_file = 'Run_airfoil_template.cfg' # ------------------------------- FREESTREAM SETTINGS ------------------------------------------------------- # # Freestream = Data() Freestream.Mach = np.array([0.21,0.25]) Freestream.Altitude = np.array([0,2000]) # in meters Freestream.Angle_of_attack = np.array([0.0,3.0,5.0]) # in degrees # ------------------------------- GEOMETRY SETTINGS --------------------------------------------------------- # # Geometry_data = Geometry() # Geometry to analyze ''' Could be airfoil or wing Airfoils can be parametrically defined using the PARSEC methods Wings are defined only using the existing CAD file and work either for straight tapered wings with or without the kink''' Geometry_data.type = 'airfoil' # Reference values Geometry_data.reference_values = { \"Area\" : 2.62, \"Length\" : 2.62, \"Depth\" : 1, \"Point\" : [0.25*2.62,0,0] # reference point about which the moment is taken } segment = Segment() segment.tag = 'section_1' segment.chord = 2.62 segment.Airfoil.files = { \"upper\" : \"main_airfoil_upper_1.dat\", \"lower\" : \"main_airfoil_lower_1.dat\" } segment.Airfoil.CST = { \"upper\" :[0.20095, 0.26864, 0.10933, 0.29307,\\ 0.12099, 0.21197, 0.18002, 0.18408], \"lower\" :[-0.20095, 0.05433, -0.46373, 0.25546,\\ -0.40375, 0.01032, -0.14109, -0.11217], \"N1 upper\" : 0.5, \"N1 lower\" : 0.5, \"N2 upper\" : 1.0, \"N2 lower\" : 1.0, \"yte upper\" : 0.001, \"yte lower\" : -0.001 } Geometry_data.Segments.append(segment) segment.plot_airfoil = True # ------------------------------- MESH SETTINGS ---------------------------------------------------------------- # # Mesh_data = Mesh() # Flag to mesh the shape or not Mesh_data.meshing = True # Mesh type Mesh_data.structured = True # Defined the OS in which Pointwise is used # WINDOWS or Linux Mesh_data.operating_system = 'Linux' # Pointwise tclsh directory used in Windows Mesh_data.tclsh_directory = r\"/home/doktorand/Fidelity/Pointwise/Pointwise2022.1\" # Desired Y+ value Mesh_data.Yplus = 1.0 # Define the Glyph template to use for meshing Mesh_data.glyph_file = \"mesh_clean_airfoil_SU2.glf\" # Mesh filename for either the newly generated mesh or an eisting mesh Mesh_data.filename = 'su2meshEx.su2' # Define far-field Mesh_data.far_field = 100 * Geometry_data.reference_values[\"Length\"] Mesh_data.airfoil_mesh_settings = { \"LE_spacing\" : 0.001, # Airfoil leading edge spacing \"TE_spacing\" : 0.0005, # Airfoil trailing edge spacing \"flap_cluster\" : 0.005, \"connector dimensions\" : [200, 200, 8], # \"connector_dimensions\": [200, 120, 150, 150, 70, 25, 8, 8], \"number of normal cells\" : 230 } # ----------------------------------------------------------------------------------------------------------------------------- # # # Pack all inputs Input = Data() Input.Solver = Solver_settings Input.Freestream = Freestream Input.Geometry = Geometry_data Input.Mesh = Mesh_data return Input if __name__ == '__main__': Input = Input_data() run_aerodynamic_analysis(Input) [describe the input for the simulation here] mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Results mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Explanation","title":"Flapped_airfoil_full"},{"location":"testcases/Flapped_airfoil_full/#clean-airfoile-cst","text":"[Description here]","title":"Clean Airfoile CST"},{"location":"testcases/Flapped_airfoil_full/#inputs","text":"import numpy as np from Core.Data import Data from Components.Solver import Solver from Components.Geometry import Geometry from Components.Geometry.Wing.Segment import Segment from Components.Mesh import Mesh from Run_aerodynamic_analysis import run_aerodynamic_analysis def Input_data(): working_dir = r\"/home/doktorand/Software/PyAeroSweep-Stan-V3/PyAeroSweep/Test_Cases/Clean_airfoil_CST\" # ------------------------------- SOLVER SETTINGS ----------------------------------------------------------- # # Solver_settings = Solver() Solver_settings.working_dir = working_dir Solver_settings.name = 'SU2' # SU2 or Fluent # Solver dimensions # 2d or 3d for SU2 Solver_settings.dimensions = '2d' # Only available for SU2 in 3D # defines half od the shape or a full shape analysis (Only symmetric works for now) Solver_settings.symmetric = True # SST or SA for SU2 Solver_settings.turbulence_model = 'SST' # Number of processors Solver_settings.processors = 4 # Cauchy convergence criteria # Could be either LIFT or DRAG Solver_settings.monitor = \"LIFT\" Solver_settings.tolerance = 5e-7 Solver_settings.max_iterations = 100 Solver_settings.save_frequency = 100 # Warm start # YES or NO Solver_settings.warmstart = 'YES' # SU2 reference config file name which will be updated Solver_settings.config_file = 'Run_airfoil_template.cfg' # ------------------------------- FREESTREAM SETTINGS ------------------------------------------------------- # # Freestream = Data() Freestream.Mach = np.array([0.21,0.25]) Freestream.Altitude = np.array([0,2000]) # in meters Freestream.Angle_of_attack = np.array([0.0,3.0,5.0]) # in degrees # ------------------------------- GEOMETRY SETTINGS --------------------------------------------------------- # # Geometry_data = Geometry() # Geometry to analyze ''' Could be airfoil or wing Airfoils can be parametrically defined using the PARSEC methods Wings are defined only using the existing CAD file and work either for straight tapered wings with or without the kink''' Geometry_data.type = 'airfoil' # Reference values Geometry_data.reference_values = { \"Area\" : 2.62, \"Length\" : 2.62, \"Depth\" : 1, \"Point\" : [0.25*2.62,0,0] # reference point about which the moment is taken } segment = Segment() segment.tag = 'section_1' segment.chord = 2.62 segment.Airfoil.files = { \"upper\" : \"main_airfoil_upper_1.dat\", \"lower\" : \"main_airfoil_lower_1.dat\" } segment.Airfoil.CST = { \"upper\" :[0.20095, 0.26864, 0.10933, 0.29307,\\ 0.12099, 0.21197, 0.18002, 0.18408], \"lower\" :[-0.20095, 0.05433, -0.46373, 0.25546,\\ -0.40375, 0.01032, -0.14109, -0.11217], \"N1 upper\" : 0.5, \"N1 lower\" : 0.5, \"N2 upper\" : 1.0, \"N2 lower\" : 1.0, \"yte upper\" : 0.001, \"yte lower\" : -0.001 } Geometry_data.Segments.append(segment) segment.plot_airfoil = True # ------------------------------- MESH SETTINGS ---------------------------------------------------------------- # # Mesh_data = Mesh() # Flag to mesh the shape or not Mesh_data.meshing = True # Mesh type Mesh_data.structured = True # Defined the OS in which Pointwise is used # WINDOWS or Linux Mesh_data.operating_system = 'Linux' # Pointwise tclsh directory used in Windows Mesh_data.tclsh_directory = r\"/home/doktorand/Fidelity/Pointwise/Pointwise2022.1\" # Desired Y+ value Mesh_data.Yplus = 1.0 # Define the Glyph template to use for meshing Mesh_data.glyph_file = \"mesh_clean_airfoil_SU2.glf\" # Mesh filename for either the newly generated mesh or an eisting mesh Mesh_data.filename = 'su2meshEx.su2' # Define far-field Mesh_data.far_field = 100 * Geometry_data.reference_values[\"Length\"] Mesh_data.airfoil_mesh_settings = { \"LE_spacing\" : 0.001, # Airfoil leading edge spacing \"TE_spacing\" : 0.0005, # Airfoil trailing edge spacing \"flap_cluster\" : 0.005, \"connector dimensions\" : [200, 200, 8], # \"connector_dimensions\": [200, 120, 150, 150, 70, 25, 8, 8], \"number of normal cells\" : 230 } # ----------------------------------------------------------------------------------------------------------------------------- # # # Pack all inputs Input = Data() Input.Solver = Solver_settings Input.Freestream = Freestream Input.Geometry = Geometry_data Input.Mesh = Mesh_data return Input if __name__ == '__main__': Input = Input_data() run_aerodynamic_analysis(Input) [describe the input for the simulation here] mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Inputs"},{"location":"testcases/Flapped_airfoil_full/#results","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Results"},{"location":"testcases/Flapped_airfoil_full/#explanation","text":"","title":"Explanation"},{"location":"testcases/Full_3D_Wing/","text":"Clean Airfoile CST [Description here] Inputs import numpy as np from Core.Data import Data from Components.Solver import Solver from Components.Geometry import Geometry from Components.Geometry.Wing.Segment import Segment from Components.Mesh import Mesh from Run_aerodynamic_analysis import run_aerodynamic_analysis def Input_data(): working_dir = r\"/home/doktorand/Software/PyAeroSweep-Stan-V3/PyAeroSweep/Test_Cases/Clean_airfoil_CST\" # ------------------------------- SOLVER SETTINGS ----------------------------------------------------------- # # Solver_settings = Solver() Solver_settings.working_dir = working_dir Solver_settings.name = 'SU2' # SU2 or Fluent # Solver dimensions # 2d or 3d for SU2 Solver_settings.dimensions = '2d' # Only available for SU2 in 3D # defines half od the shape or a full shape analysis (Only symmetric works for now) Solver_settings.symmetric = True # SST or SA for SU2 Solver_settings.turbulence_model = 'SST' # Number of processors Solver_settings.processors = 4 # Cauchy convergence criteria # Could be either LIFT or DRAG Solver_settings.monitor = \"LIFT\" Solver_settings.tolerance = 5e-7 Solver_settings.max_iterations = 100 Solver_settings.save_frequency = 100 # Warm start # YES or NO Solver_settings.warmstart = 'YES' # SU2 reference config file name which will be updated Solver_settings.config_file = 'Run_airfoil_template.cfg' # ------------------------------- FREESTREAM SETTINGS ------------------------------------------------------- # # Freestream = Data() Freestream.Mach = np.array([0.21,0.25]) Freestream.Altitude = np.array([0,2000]) # in meters Freestream.Angle_of_attack = np.array([0.0,3.0,5.0]) # in degrees # ------------------------------- GEOMETRY SETTINGS --------------------------------------------------------- # # Geometry_data = Geometry() # Geometry to analyze ''' Could be airfoil or wing Airfoils can be parametrically defined using the PARSEC methods Wings are defined only using the existing CAD file and work either for straight tapered wings with or without the kink''' Geometry_data.type = 'airfoil' # Reference values Geometry_data.reference_values = { \"Area\" : 2.62, \"Length\" : 2.62, \"Depth\" : 1, \"Point\" : [0.25*2.62,0,0] # reference point about which the moment is taken } segment = Segment() segment.tag = 'section_1' segment.chord = 2.62 segment.Airfoil.files = { \"upper\" : \"main_airfoil_upper_1.dat\", \"lower\" : \"main_airfoil_lower_1.dat\" } segment.Airfoil.CST = { \"upper\" :[0.20095, 0.26864, 0.10933, 0.29307,\\ 0.12099, 0.21197, 0.18002, 0.18408], \"lower\" :[-0.20095, 0.05433, -0.46373, 0.25546,\\ -0.40375, 0.01032, -0.14109, -0.11217], \"N1 upper\" : 0.5, \"N1 lower\" : 0.5, \"N2 upper\" : 1.0, \"N2 lower\" : 1.0, \"yte upper\" : 0.001, \"yte lower\" : -0.001 } Geometry_data.Segments.append(segment) segment.plot_airfoil = True # ------------------------------- MESH SETTINGS ---------------------------------------------------------------- # # Mesh_data = Mesh() # Flag to mesh the shape or not Mesh_data.meshing = True # Mesh type Mesh_data.structured = True # Defined the OS in which Pointwise is used # WINDOWS or Linux Mesh_data.operating_system = 'Linux' # Pointwise tclsh directory used in Windows Mesh_data.tclsh_directory = r\"/home/doktorand/Fidelity/Pointwise/Pointwise2022.1\" # Desired Y+ value Mesh_data.Yplus = 1.0 # Define the Glyph template to use for meshing Mesh_data.glyph_file = \"mesh_clean_airfoil_SU2.glf\" # Mesh filename for either the newly generated mesh or an eisting mesh Mesh_data.filename = 'su2meshEx.su2' # Define far-field Mesh_data.far_field = 100 * Geometry_data.reference_values[\"Length\"] Mesh_data.airfoil_mesh_settings = { \"LE_spacing\" : 0.001, # Airfoil leading edge spacing \"TE_spacing\" : 0.0005, # Airfoil trailing edge spacing \"flap_cluster\" : 0.005, \"connector dimensions\" : [200, 200, 8], # \"connector_dimensions\": [200, 120, 150, 150, 70, 25, 8, 8], \"number of normal cells\" : 230 } # ----------------------------------------------------------------------------------------------------------------------------- # # # Pack all inputs Input = Data() Input.Solver = Solver_settings Input.Freestream = Freestream Input.Geometry = Geometry_data Input.Mesh = Mesh_data return Input if __name__ == '__main__': Input = Input_data() run_aerodynamic_analysis(Input) [describe the input for the simulation here] mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Results mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Explanation","title":"Full_3D_Wing"},{"location":"testcases/Full_3D_Wing/#clean-airfoile-cst","text":"[Description here]","title":"Clean Airfoile CST"},{"location":"testcases/Full_3D_Wing/#inputs","text":"import numpy as np from Core.Data import Data from Components.Solver import Solver from Components.Geometry import Geometry from Components.Geometry.Wing.Segment import Segment from Components.Mesh import Mesh from Run_aerodynamic_analysis import run_aerodynamic_analysis def Input_data(): working_dir = r\"/home/doktorand/Software/PyAeroSweep-Stan-V3/PyAeroSweep/Test_Cases/Clean_airfoil_CST\" # ------------------------------- SOLVER SETTINGS ----------------------------------------------------------- # # Solver_settings = Solver() Solver_settings.working_dir = working_dir Solver_settings.name = 'SU2' # SU2 or Fluent # Solver dimensions # 2d or 3d for SU2 Solver_settings.dimensions = '2d' # Only available for SU2 in 3D # defines half od the shape or a full shape analysis (Only symmetric works for now) Solver_settings.symmetric = True # SST or SA for SU2 Solver_settings.turbulence_model = 'SST' # Number of processors Solver_settings.processors = 4 # Cauchy convergence criteria # Could be either LIFT or DRAG Solver_settings.monitor = \"LIFT\" Solver_settings.tolerance = 5e-7 Solver_settings.max_iterations = 100 Solver_settings.save_frequency = 100 # Warm start # YES or NO Solver_settings.warmstart = 'YES' # SU2 reference config file name which will be updated Solver_settings.config_file = 'Run_airfoil_template.cfg' # ------------------------------- FREESTREAM SETTINGS ------------------------------------------------------- # # Freestream = Data() Freestream.Mach = np.array([0.21,0.25]) Freestream.Altitude = np.array([0,2000]) # in meters Freestream.Angle_of_attack = np.array([0.0,3.0,5.0]) # in degrees # ------------------------------- GEOMETRY SETTINGS --------------------------------------------------------- # # Geometry_data = Geometry() # Geometry to analyze ''' Could be airfoil or wing Airfoils can be parametrically defined using the PARSEC methods Wings are defined only using the existing CAD file and work either for straight tapered wings with or without the kink''' Geometry_data.type = 'airfoil' # Reference values Geometry_data.reference_values = { \"Area\" : 2.62, \"Length\" : 2.62, \"Depth\" : 1, \"Point\" : [0.25*2.62,0,0] # reference point about which the moment is taken } segment = Segment() segment.tag = 'section_1' segment.chord = 2.62 segment.Airfoil.files = { \"upper\" : \"main_airfoil_upper_1.dat\", \"lower\" : \"main_airfoil_lower_1.dat\" } segment.Airfoil.CST = { \"upper\" :[0.20095, 0.26864, 0.10933, 0.29307,\\ 0.12099, 0.21197, 0.18002, 0.18408], \"lower\" :[-0.20095, 0.05433, -0.46373, 0.25546,\\ -0.40375, 0.01032, -0.14109, -0.11217], \"N1 upper\" : 0.5, \"N1 lower\" : 0.5, \"N2 upper\" : 1.0, \"N2 lower\" : 1.0, \"yte upper\" : 0.001, \"yte lower\" : -0.001 } Geometry_data.Segments.append(segment) segment.plot_airfoil = True # ------------------------------- MESH SETTINGS ---------------------------------------------------------------- # # Mesh_data = Mesh() # Flag to mesh the shape or not Mesh_data.meshing = True # Mesh type Mesh_data.structured = True # Defined the OS in which Pointwise is used # WINDOWS or Linux Mesh_data.operating_system = 'Linux' # Pointwise tclsh directory used in Windows Mesh_data.tclsh_directory = r\"/home/doktorand/Fidelity/Pointwise/Pointwise2022.1\" # Desired Y+ value Mesh_data.Yplus = 1.0 # Define the Glyph template to use for meshing Mesh_data.glyph_file = \"mesh_clean_airfoil_SU2.glf\" # Mesh filename for either the newly generated mesh or an eisting mesh Mesh_data.filename = 'su2meshEx.su2' # Define far-field Mesh_data.far_field = 100 * Geometry_data.reference_values[\"Length\"] Mesh_data.airfoil_mesh_settings = { \"LE_spacing\" : 0.001, # Airfoil leading edge spacing \"TE_spacing\" : 0.0005, # Airfoil trailing edge spacing \"flap_cluster\" : 0.005, \"connector dimensions\" : [200, 200, 8], # \"connector_dimensions\": [200, 120, 150, 150, 70, 25, 8, 8], \"number of normal cells\" : 230 } # ----------------------------------------------------------------------------------------------------------------------------- # # # Pack all inputs Input = Data() Input.Solver = Solver_settings Input.Freestream = Freestream Input.Geometry = Geometry_data Input.Mesh = Mesh_data return Input if __name__ == '__main__': Input = Input_data() run_aerodynamic_analysis(Input) [describe the input for the simulation here] mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Inputs"},{"location":"testcases/Full_3D_Wing/#results","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Results"},{"location":"testcases/Full_3D_Wing/#explanation","text":"","title":"Explanation"}]}